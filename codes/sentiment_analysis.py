#Sentiment Analysis

# Stanza
import stanza
#stanza.download('en')
import seaborn as sns
import pandas as pd
import numpy as np

# import text2emotion
import text2emotion as te
import matplotlib.pyplot as plt

tweets_df = pd.read_csv('data\\full_reduced_data.csv')



# Define function to get value counts
def get_value_counts(col_name, analyzer_name):
    count = pd.DataFrame(tweets_df[col_name].value_counts())
    percentage = pd.DataFrame(tweets_df[col_name].value_counts(normalize=True).mul(100))
    value_counts_df = pd.concat([count, percentage], axis = 1)
    value_counts_df = value_counts_df.reset_index()
    value_counts_df.columns = ['sentiment', 'counts', 'percentage']
    value_counts_df.sort_values('sentiment', inplace = True)
    value_counts_df['percentage'] = value_counts_df['percentage'].apply(lambda x: round(x,2))
    value_counts_df = value_counts_df.reset_index(drop = True)
    value_counts_df['analyzer'] = analyzer_name
    return value_counts_df


nlp = stanza.Pipeline(lang='en', processors='tokenize,sentiment')
def stanza_analyze(Text):
    document = nlp(Text)
    #print('Processing')
    return np.mean([(i.sentiment - 1) for i in document.sentences]) # Minus 1 so as to bring score range of [0,2] to [-1,1]

# Obtain sentiment categorical score generated by Stanza
tweets_df['stanza_score'] = tweets_df['text_cleaned'].apply(lambda x: stanza_analyze(x))
tweets_df['stanza_score'].describe()

#Setting the threshold
neutral_thresh = 0.01
# Convert average Stanza sentiment score into sentiment categories
tweets_df['stanza_sentiment'] = tweets_df['stanza_score'].apply(lambda c: 'Positive' if c >= neutral_thresh else ('Negative' if c <= -(neutral_thresh) else 'Neutral'))

#Stanza Sentiment score of tweets
stanza_sentiment_df = get_value_counts('stanza_sentiment','Stanza')

#Visualizing the Stanza Sentiment 
sns.set_theme(style="dark")
ax = sns.barplot(x="sentiment", y="percentage", data=stanza_sentiment_df)
ax.set_title('Stanza')

for index, row in stanza_sentiment_df.iterrows():
    ax.text(row.name,row.percentage, round(row.percentage,1), color='black', ha="center")
plt.savefig('assets\\sentiment_bar_graph.png')
plt.close()

# emotion determination with text2emotion
tweets_df['emotion'] =tweets_df['text_cleaned'].apply(lambda x: te.get_emotion(x))

# assigning the emotion score in each column
tweets_df['Happy'] = tweets_df['emotion'].apply(lambda x : x['Happy'])
tweets_df['Angry'] = tweets_df['emotion'].apply(lambda x : x['Angry'])
tweets_df['Surprise'] = tweets_df['emotion'].apply(lambda x : x['Surprise'])
tweets_df['Sad'] = tweets_df['emotion'].apply(lambda x : x['Sad'])
tweets_df['Fear'] = tweets_df['emotion'].apply(lambda x : x['Fear'])

# function to add value labels
def addlabels(x,y):
    for i in range(len(x)):
        plt.text(i, y[i], round(y[i],2), ha = 'center')

#Visualizing the emotions for tweets 
graph_vals = {}
graph_vals['Happy'] = tweets_df.Happy.sum()/len(tweets_df)*100
graph_vals['Angry'] = tweets_df.Angry.sum()/len(tweets_df)*100
graph_vals['Surprise'] = tweets_df.Surprise.sum()/len(tweets_df)*100
graph_vals['Sad'] = tweets_df.Sad.sum()/len(tweets_df)*100
graph_vals['Fear'] = tweets_df.Fear.sum()/len(tweets_df)*100

graph_names = list(graph_vals.keys())
graph_values = list(graph_vals.values())
plt.bar(range(len(graph_vals)),graph_values,tick_label = graph_names)
addlabels(graph_names, graph_values)
plt.xlabel("Emotion")
plt.ylabel("Aggregated percentage")
#plt.show()
plt.savefig('assets\\emotion_bar_graph.png')
plt.close()
tweets_df.to_csv('data\\sem_output.csv',index=False)

